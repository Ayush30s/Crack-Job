class Solution {
public:

    int solve(int ind , int n , vector<int> &prices , int buy , vector<vector<int>> &memo){
        if(ind == n) return 0;

        if(memo[ind][buy]!=-1)  {
            return memo[ind][buy];
        }

        int profit = 0;
        if(buy==1){    

            int take = -prices[ind] + solve(ind+1 , n , prices , 0 ,memo);   
            int notTake = 0 + solve(ind+1 , n , prices , 1 , memo);   
            profit = max(take , notTake);    
        } else {    
            int take = prices[ind] + solve(ind+1 , n , prices , 1 , memo);    
            int notTake = 0 + solve(ind+1 , n , prices , 0 , memo);       
            profit = max(take , notTake);    
        }
        return memo[ind][buy] = profit;
    }

    int maxProfit(vector<int>& prices) {
        int buy = 1;      
        int n = prices.size();
        vector<vector<int>> memo(n , vector<int> (2 , -1));
        int profit = solve(0 ,n , prices , buy , memo);
        return profit;
    }
};
